basePath = "/v2"
host = "petstore.swagger.io"
schemes = ["https", "http"]
swagger = "2.0"

[definitions]

[definitions.ApiResponse]
type = "object"

[definitions.ApiResponse.properties]

[definitions.ApiResponse.properties.code]
format = "int32"
type = "integer"

[definitions.ApiResponse.properties.message]
type = "string"

[definitions.ApiResponse.properties.type]
type = "string"

[definitions.Category]
type = "object"

[definitions.Category.properties]

[definitions.Category.properties.id]
format = "int64"
type = "integer"

[definitions.Category.properties.name]
type = "string"

[definitions.Category.xml]
name = "Category"

[definitions.Order]
type = "object"

[definitions.Order.properties]

[definitions.Order.properties.complete]
default = false
type = "boolean"

[definitions.Order.properties.id]
format = "int64"
type = "integer"

[definitions.Order.properties.petId]
format = "int64"
type = "integer"

[definitions.Order.properties.quantity]
format = "int32"
type = "integer"

[definitions.Order.properties.shipDate]
format = "date-time"
type = "string"

[definitions.Order.properties.status]
description = "Order Status"
enum = ["placed", "approved", "delivered"]
type = "string"

[definitions.Order.xml]
name = "Order"

[definitions.Pet]
required = ["name", "photoUrls"]
type = "object"

[definitions.Pet.properties]

[definitions.Pet.properties.category]
"$ref" = "#/definitions/Category"

[definitions.Pet.properties.id]
format = "int64"
type = "integer"

[definitions.Pet.properties.name]
example = "doggie"
type = "string"

[definitions.Pet.properties.photoUrls]
type = "array"

[definitions.Pet.properties.photoUrls.items]
type = "string"

[definitions.Pet.properties.photoUrls.xml]
name = "photoUrl"
wrapped = true

[definitions.Pet.properties.status]
description = "pet status in the store"
enum = ["available", "pending", "sold"]
type = "string"

[definitions.Pet.properties.tags]
type = "array"

[definitions.Pet.properties.tags.items]
"$ref" = "#/definitions/Tag"

[definitions.Pet.properties.tags.xml]
name = "tag"
wrapped = true

[definitions.Pet.xml]
name = "Pet"

[definitions.Tag]
type = "object"

[definitions.Tag.properties]

[definitions.Tag.properties.id]
format = "int64"
type = "integer"

[definitions.Tag.properties.name]
type = "string"

[definitions.Tag.xml]
name = "Tag"

[definitions.User]
type = "object"

[definitions.User.properties]

[definitions.User.properties.email]
type = "string"

[definitions.User.properties.firstName]
type = "string"

[definitions.User.properties.id]
format = "int64"
type = "integer"

[definitions.User.properties.lastName]
type = "string"

[definitions.User.properties.password]
type = "string"

[definitions.User.properties.phone]
type = "string"

[definitions.User.properties.userStatus]
description = "User Status"
format = "int32"
type = "integer"

[definitions.User.properties.username]
type = "string"

[definitions.User.xml]
name = "User"

[externalDocs]
description = "Find out more about Swagger"
url = "http://swagger.io"

[info]
description = "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters."
termsOfService = "http://swagger.io/terms/"
title = "Swagger Petstore"
version = "1.0.0"

[info.contact]
email = "apiteam@swagger.io"

[info.license]
name = "Apache 2.0"
url = "http://www.apache.org/licenses/LICENSE-2.0.html"

[paths]

[paths."/pet"]

[paths."/pet".post]
consumes = ["application/json", "application/xml"]
description = ""
operationId = "addPet"
produces = ["application/xml", "application/json"]
summary = "Add a new pet to the store"
tags = ["pet"]

[[paths."/pet".post.parameters]]
description = "Pet object that needs to be added to the store"
in = "body"
name = "body"
required = true

[paths."/pet".post.parameters.schema]
"$ref" = "#/definitions/Pet"

[paths."/pet".post.responses]

[paths."/pet".post.responses.405]
description = "Invalid input"

[[paths."/pet".post.security]]
petstore_auth = ["write:pets", "read:pets"]

[paths."/pet".put]
consumes = ["application/json", "application/xml"]
description = ""
operationId = "updatePet"
produces = ["application/xml", "application/json"]
summary = "Update an existing pet"
tags = ["pet"]

[[paths."/pet".put.parameters]]
description = "Pet object that needs to be added to the store"
in = "body"
name = "body"
required = true

[paths."/pet".put.parameters.schema]
"$ref" = "#/definitions/Pet"

[paths."/pet".put.responses]

[paths."/pet".put.responses.400]
description = "Invalid ID supplied"

[paths."/pet".put.responses.404]
description = "Pet not found"

[paths."/pet".put.responses.405]
description = "Validation exception"

[[paths."/pet".put.security]]
petstore_auth = ["write:pets", "read:pets"]

[paths."/pet/findByStatus"]

[paths."/pet/findByStatus".get]
description = "Multiple status values can be provided with comma separated strings"
operationId = "findPetsByStatus"
produces = ["application/xml", "application/json"]
summary = "Finds Pets by status"
tags = ["pet"]

[[paths."/pet/findByStatus".get.parameters]]
collectionFormat = "multi"
description = "Status values that need to be considered for filter"
in = "query"
name = "status"
required = true
type = "array"

[paths."/pet/findByStatus".get.parameters.items]
default = "available"
enum = ["available", "pending", "sold"]
type = "string"

[paths."/pet/findByStatus".get.responses]

[paths."/pet/findByStatus".get.responses.200]
description = "successful operation"

[paths."/pet/findByStatus".get.responses.200.schema]
type = "array"

[paths."/pet/findByStatus".get.responses.200.schema.items]
"$ref" = "#/definitions/Pet"

[paths."/pet/findByStatus".get.responses.400]
description = "Invalid status value"

[[paths."/pet/findByStatus".get.security]]
petstore_auth = ["write:pets", "read:pets"]

[paths."/pet/findByTags"]

[paths."/pet/findByTags".get]
deprecated = true
description = "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing."
operationId = "findPetsByTags"
produces = ["application/xml", "application/json"]
summary = "Finds Pets by tags"
tags = ["pet"]

[[paths."/pet/findByTags".get.parameters]]
collectionFormat = "multi"
description = "Tags to filter by"
in = "query"
name = "tags"
required = true
type = "array"

[paths."/pet/findByTags".get.parameters.items]
type = "string"

[paths."/pet/findByTags".get.responses]

[paths."/pet/findByTags".get.responses.200]
description = "successful operation"

[paths."/pet/findByTags".get.responses.200.schema]
type = "array"

[paths."/pet/findByTags".get.responses.200.schema.items]
"$ref" = "#/definitions/Pet"

[paths."/pet/findByTags".get.responses.400]
description = "Invalid tag value"

[[paths."/pet/findByTags".get.security]]
petstore_auth = ["write:pets", "read:pets"]

[paths."/pet/{petId}"]

[paths."/pet/{petId}".delete]
description = ""
operationId = "deletePet"
produces = ["application/xml", "application/json"]
summary = "Deletes a pet"
tags = ["pet"]

[[paths."/pet/{petId}".delete.parameters]]
in = "header"
name = "api_key"
required = false
type = "string"

[[paths."/pet/{petId}".delete.parameters]]
description = "Pet id to delete"
format = "int64"
in = "path"
name = "petId"
required = true
type = "integer"

[paths."/pet/{petId}".delete.responses]

[paths."/pet/{petId}".delete.responses.400]
description = "Invalid ID supplied"

[paths."/pet/{petId}".delete.responses.404]
description = "Pet not found"

[[paths."/pet/{petId}".delete.security]]
petstore_auth = ["write:pets", "read:pets"]

[paths."/pet/{petId}".get]
description = "Returns a single pet"
operationId = "getPetById"
produces = ["application/xml", "application/json"]
summary = "Find pet by ID"
tags = ["pet"]

[[paths."/pet/{petId}".get.parameters]]
description = "ID of pet to return"
format = "int64"
in = "path"
name = "petId"
required = true
type = "integer"

[paths."/pet/{petId}".get.responses]

[paths."/pet/{petId}".get.responses.200]
description = "successful operation"

[paths."/pet/{petId}".get.responses.200.schema]
"$ref" = "#/definitions/Pet"

[paths."/pet/{petId}".get.responses.400]
description = "Invalid ID supplied"

[paths."/pet/{petId}".get.responses.404]
description = "Pet not found"

[[paths."/pet/{petId}".get.security]]
api_key = []

[paths."/pet/{petId}".post]
consumes = ["application/x-www-form-urlencoded"]
description = ""
operationId = "updatePetWithForm"
produces = ["application/xml", "application/json"]
summary = "Updates a pet in the store with form data"
tags = ["pet"]

[[paths."/pet/{petId}".post.parameters]]
description = "ID of pet that needs to be updated"
format = "int64"
in = "path"
name = "petId"
required = true
type = "integer"

[[paths."/pet/{petId}".post.parameters]]
description = "Updated name of the pet"
in = "formData"
name = "name"
required = false
type = "string"

[[paths."/pet/{petId}".post.parameters]]
description = "Updated status of the pet"
in = "formData"
name = "status"
required = false
type = "string"

[paths."/pet/{petId}".post.responses]

[paths."/pet/{petId}".post.responses.405]
description = "Invalid input"

[[paths."/pet/{petId}".post.security]]
petstore_auth = ["write:pets", "read:pets"]

[paths."/pet/{petId}/uploadImage"]

[paths."/pet/{petId}/uploadImage".post]
consumes = ["multipart/form-data"]
description = ""
operationId = "uploadFile"
produces = ["application/json"]
summary = "uploads an image"
tags = ["pet"]

[[paths."/pet/{petId}/uploadImage".post.parameters]]
description = "ID of pet to update"
format = "int64"
in = "path"
name = "petId"
required = true
type = "integer"

[[paths."/pet/{petId}/uploadImage".post.parameters]]
description = "Additional data to pass to server"
in = "formData"
name = "additionalMetadata"
required = false
type = "string"

[[paths."/pet/{petId}/uploadImage".post.parameters]]
description = "file to upload"
in = "formData"
name = "file"
required = false
type = "file"

[paths."/pet/{petId}/uploadImage".post.responses]

[paths."/pet/{petId}/uploadImage".post.responses.200]
description = "successful operation"

[paths."/pet/{petId}/uploadImage".post.responses.200.schema]
"$ref" = "#/definitions/ApiResponse"

[[paths."/pet/{petId}/uploadImage".post.security]]
petstore_auth = ["write:pets", "read:pets"]

[paths."/store/inventory"]

[paths."/store/inventory".get]
description = "Returns a map of status codes to quantities"
operationId = "getInventory"
parameters = []
produces = ["application/json"]
summary = "Returns pet inventories by status"
tags = ["store"]

[paths."/store/inventory".get.responses]

[paths."/store/inventory".get.responses.200]
description = "successful operation"

[paths."/store/inventory".get.responses.200.schema]
type = "object"

[paths."/store/inventory".get.responses.200.schema.additionalProperties]
format = "int32"
type = "integer"

[[paths."/store/inventory".get.security]]
api_key = []

[paths."/store/order"]

[paths."/store/order".post]
description = ""
operationId = "placeOrder"
produces = ["application/xml", "application/json"]
summary = "Place an order for a pet"
tags = ["store"]

[[paths."/store/order".post.parameters]]
description = "order placed for purchasing the pet"
in = "body"
name = "body"
required = true

[paths."/store/order".post.parameters.schema]
"$ref" = "#/definitions/Order"

[paths."/store/order".post.responses]

[paths."/store/order".post.responses.200]
description = "successful operation"

[paths."/store/order".post.responses.200.schema]
"$ref" = "#/definitions/Order"

[paths."/store/order".post.responses.400]
description = "Invalid Order"

[paths."/store/order/{orderId}"]

[paths."/store/order/{orderId}".delete]
description = "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors"
operationId = "deleteOrder"
produces = ["application/xml", "application/json"]
summary = "Delete purchase order by ID"
tags = ["store"]

[[paths."/store/order/{orderId}".delete.parameters]]
description = "ID of the order that needs to be deleted"
format = "int64"
in = "path"
minimum = 1.0
name = "orderId"
required = true
type = "integer"

[paths."/store/order/{orderId}".delete.responses]

[paths."/store/order/{orderId}".delete.responses.400]
description = "Invalid ID supplied"

[paths."/store/order/{orderId}".delete.responses.404]
description = "Order not found"

[paths."/store/order/{orderId}".get]
description = "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions"
operationId = "getOrderById"
produces = ["application/xml", "application/json"]
summary = "Find purchase order by ID"
tags = ["store"]

[[paths."/store/order/{orderId}".get.parameters]]
description = "ID of pet that needs to be fetched"
format = "int64"
in = "path"
maximum = 10.0
minimum = 1.0
name = "orderId"
required = true
type = "integer"

[paths."/store/order/{orderId}".get.responses]

[paths."/store/order/{orderId}".get.responses.200]
description = "successful operation"

[paths."/store/order/{orderId}".get.responses.200.schema]
"$ref" = "#/definitions/Order"

[paths."/store/order/{orderId}".get.responses.400]
description = "Invalid ID supplied"

[paths."/store/order/{orderId}".get.responses.404]
description = "Order not found"

[paths."/user"]

[paths."/user".post]
description = "This can only be done by the logged in user."
operationId = "createUser"
produces = ["application/xml", "application/json"]
summary = "Create user"
tags = ["user"]

[[paths."/user".post.parameters]]
description = "Created user object"
in = "body"
name = "body"
required = true

[paths."/user".post.parameters.schema]
"$ref" = "#/definitions/User"

[paths."/user".post.responses]

[paths."/user".post.responses.default]
description = "successful operation"

[paths."/user/createWithArray"]

[paths."/user/createWithArray".post]
description = ""
operationId = "createUsersWithArrayInput"
produces = ["application/xml", "application/json"]
summary = "Creates list of users with given input array"
tags = ["user"]

[[paths."/user/createWithArray".post.parameters]]
description = "List of user object"
in = "body"
name = "body"
required = true

[paths."/user/createWithArray".post.parameters.schema]
type = "array"

[paths."/user/createWithArray".post.parameters.schema.items]
"$ref" = "#/definitions/User"

[paths."/user/createWithArray".post.responses]

[paths."/user/createWithArray".post.responses.default]
description = "successful operation"

[paths."/user/createWithList"]

[paths."/user/createWithList".post]
description = ""
operationId = "createUsersWithListInput"
produces = ["application/xml", "application/json"]
summary = "Creates list of users with given input array"
tags = ["user"]

[[paths."/user/createWithList".post.parameters]]
description = "List of user object"
in = "body"
name = "body"
required = true

[paths."/user/createWithList".post.parameters.schema]
type = "array"

[paths."/user/createWithList".post.parameters.schema.items]
"$ref" = "#/definitions/User"

[paths."/user/createWithList".post.responses]

[paths."/user/createWithList".post.responses.default]
description = "successful operation"

[paths."/user/login"]

[paths."/user/login".get]
description = ""
operationId = "loginUser"
produces = ["application/xml", "application/json"]
summary = "Logs user into the system"
tags = ["user"]

[[paths."/user/login".get.parameters]]
description = "The user name for login"
in = "query"
name = "username"
required = true
type = "string"

[[paths."/user/login".get.parameters]]
description = "The password for login in clear text"
in = "query"
name = "password"
required = true
type = "string"

[paths."/user/login".get.responses]

[paths."/user/login".get.responses.200]
description = "successful operation"

[paths."/user/login".get.responses.200.headers]

[paths."/user/login".get.responses.200.headers.X-Expires-After]
description = "date in UTC when token expires"
format = "date-time"
type = "string"

[paths."/user/login".get.responses.200.headers.X-Rate-Limit]
description = "calls per hour allowed by the user"
format = "int32"
type = "integer"

[paths."/user/login".get.responses.200.schema]
type = "string"

[paths."/user/login".get.responses.400]
description = "Invalid username/password supplied"

[paths."/user/logout"]

[paths."/user/logout".get]
description = ""
operationId = "logoutUser"
parameters = []
produces = ["application/xml", "application/json"]
summary = "Logs out current logged in user session"
tags = ["user"]

[paths."/user/logout".get.responses]

[paths."/user/logout".get.responses.default]
description = "successful operation"

[paths."/user/{username}"]

[paths."/user/{username}".delete]
description = "This can only be done by the logged in user."
operationId = "deleteUser"
produces = ["application/xml", "application/json"]
summary = "Delete user"
tags = ["user"]

[[paths."/user/{username}".delete.parameters]]
description = "The name that needs to be deleted"
in = "path"
name = "username"
required = true
type = "string"

[paths."/user/{username}".delete.responses]

[paths."/user/{username}".delete.responses.400]
description = "Invalid username supplied"

[paths."/user/{username}".delete.responses.404]
description = "User not found"

[paths."/user/{username}".get]
description = ""
operationId = "getUserByName"
produces = ["application/xml", "application/json"]
summary = "Get user by user name"
tags = ["user"]

[[paths."/user/{username}".get.parameters]]
description = "The name that needs to be fetched. Use user1 for testing. "
in = "path"
name = "username"
required = true
type = "string"

[paths."/user/{username}".get.responses]

[paths."/user/{username}".get.responses.200]
description = "successful operation"

[paths."/user/{username}".get.responses.200.schema]
"$ref" = "#/definitions/User"

[paths."/user/{username}".get.responses.400]
description = "Invalid username supplied"

[paths."/user/{username}".get.responses.404]
description = "User not found"

[paths."/user/{username}".put]
description = "This can only be done by the logged in user."
operationId = "updateUser"
produces = ["application/xml", "application/json"]
summary = "Updated user"
tags = ["user"]

[[paths."/user/{username}".put.parameters]]
description = "name that need to be updated"
in = "path"
name = "username"
required = true
type = "string"

[[paths."/user/{username}".put.parameters]]
description = "Updated user object"
in = "body"
name = "body"
required = true

[paths."/user/{username}".put.parameters.schema]
"$ref" = "#/definitions/User"

[paths."/user/{username}".put.responses]

[paths."/user/{username}".put.responses.400]
description = "Invalid user supplied"

[paths."/user/{username}".put.responses.404]
description = "User not found"

[securityDefinitions]

[securityDefinitions.api_key]
in = "header"
name = "api_key"
type = "apiKey"

[securityDefinitions.petstore_auth]
authorizationUrl = "https://petstore.swagger.io/oauth/authorize"
flow = "implicit"
type = "oauth2"

[securityDefinitions.petstore_auth.scopes]
"read:pets" = "read your pets"
"write:pets" = "modify pets in your account"

[[tags]]
description = "Everything about your Pets"
name = "pet"

[tags.externalDocs]
description = "Find out more"
url = "http://swagger.io"

[[tags]]
description = "Access to Petstore orders"
name = "store"

[[tags]]
description = "Operations about user"
name = "user"

[tags.externalDocs]
description = "Find out more about our store"
url = "http://swagger.io"
